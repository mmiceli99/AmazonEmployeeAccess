geom_bar(mapping = action)
ggplot(ama_train) +
geom_bar(mapping = ACTION)
ggplot(ama_train) +
geom_bar(mapping = ama_test$id)
ggplot(ama_train) +
geom_bar(aes(mapping = ama_test$id))
geom_bar(aes(x=ama_train$ACTION)
ggplot(ama_train) +
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION))
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION, fill = ama_train$RESOURCE))
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION, col = ama_train$RESOURCE))
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION), col = ama_train$MGR_ID)
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION), fill = ama_train$RESOURCE)
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION))
ggplot(ama_train) +
geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
ggplot(ama_train) +
geom_boxplot(aes(x=ama_train$RESOURCE, y = ACTION))
library(ggbox)
my_recipe <- recipe(rFormula, data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(rFormula, data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
library(tidymodels)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
my_recipe <- recipe(rFormula, data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) #%>% # dummy variable encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) #%>% # dummy variable encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_mod <- linear_reg() %>%
set_engine("lm")
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) #%>% # dummy variable encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
install.packages('embed')
library(embed)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
model <- glm(target ~ ACTION, data = ama_train, family = "binomial")
# Fit logistic regression model
model <- glm(ACTION ~ ., data = ama_train, family = "binomial")
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow,
new_data=ama_test)
View(ama_predictions)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(RESOURCE, .pred) #Just keep datetime and predictions
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
bind_cols(., ama_train) %>% #Bind predictions with test data
select(RESOURCE, .pred) #Just keep datetime and predictions
View(ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
bind_cols(., ama_test) %>% #Bind predictions with test data
select(RESOURCE, .pred) #Just keep datetime and predictions
ama_predictions <- predict(ama_workflow, new_data=ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate(row_number = row_number()) %>%
select(row_number, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
select(Id, .pred)
vroom_write(x=test_preds, file="./LogReg.csv", delim=",")
vroom_write(x=ama_preds, file="./LogReg.csv", delim=",")
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
wd()
source("C:/School/Stat348/AmazonEmployeeAccess/Amazon_eda.R")
getwd()
setwd("C:/School/Stat348/AmazonEmployeeAccess")
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(ACTION=.pred) %>%
select(Id, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
View(ama_test)
View(ama_train)
View(ama_test)
View(ama_train)
View(ama_test)
View(ama_test)
View(ama_train)
View(ama_test)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_mod <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_mutate_at(ACTION = as.factor(ACTION)) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_mod <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
baked <- bake(prep, new_date = ama_test)
baked <- bake(prep, new_date = ama_test)
baked <- bake(prep, new_data = ama_train)
baked <- bake(prep, new_date = ama_test)
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
baked <- bake(prep, new_date = ama_test)
ama_test
# ggplot(ama_train) +
#   geom_bar(aes(x=ama_train$ACTION))
#
# ggplot(ama_train) +
#   geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
#
ama_train <- ama_train %>%
mutate(ACTION = as.factor(ACTION))
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_mod <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
ama_predictions <- predict(ama_workflow, new_data=ama_test
ama_predictions <- predict(ama_workflow, new_data=ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test)
View(ama_predictions)
View(ama_predictions)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_class) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_class) %>%
select(Id, Action)
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_prob) %>%
select(Id, Action)
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob')
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_1) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
insta
install.packages('ggmosaic')
library(ggmosaic)
ggplot(data=) + geom_mosaic(aes(x=product(CatVar), fill=Target))2
ggplot(data=) + geom_mosaic(aes(x=product(CatVar), fill=Target))
ggplot(data=ama_train) +
geom_mosaic(aes(x=ACTION), fill=Target))
ggplot(data=ama_train) +
geom_mosaic(aes(x=ACTION), fill=Target)
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
library(ggmosaic)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
ggplot(data=ama_train) +
geom_mosaic(aes(x=ACTION), fill=Target)
View(ama_train)
ggplot(data=ama_train) +
geom_mosaic(aes(x=ama_train$ACTION), fill=Target)
ggplot(data=ama_train) +
geom_mosaic(aes(x=ama_train$ACTION), fill=RESOURCE)
ggplot(data=ama_train) +
geom_mosaic(aes(x=ama_train$ACTION), fill=ama_train$RESOURCE)
ggplot(data=ama_train) +
geom_mosaic(aes(x=ama_train$RESOURCE), fill=ama_train$ACTION)
ggplot(data=ama_train) +
geom_mosaic(aes(x=ama_train$ROLE_TITLE), fill=ama_train$ACTION)
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
ama_train <- ama_train %>%
mutate(ACTION = as.factor(ACTION))
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
set_engine("glmnet")
amazon_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(penalty(),
mixture(),
levels = 5) ## L^2 total tuning possibilities
## Split data for CV
folds <- vfold_cv(myDataSet, v = 5, repeats=1)
## Split data for CV
folds <- vfold_cv(ama_train, v = 5, repeats=1)
## Run the CV
CV_results <- amazon_workflow %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics=metric_set(roc_auc)) #Or leave metrics NULL
## Find Best Tuning Parameters
bestTune <- CV_results %>%
select_best("roc_auc")
bestTune
## Finalize the Workflow & fit it
final_wf <-
preg_wf %>%
finalize_workflow(bestTune) %>%
fit(data=myDataSet)
## Finalize the Workflow & fit it
final_wf <-
amazon_workflow %>%
finalize_workflow(bestTune) %>%
fit(data=myDataSet)
## Finalize the Workflow & fit it
final_wf <-
amazon_workflow %>%
finalize_workflow(bestTune) %>%
fit(data=ama_train)
## Predict
ama_predictions <- predict(final_workflow, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_1) %>%
select(Id, Action)
## Predict
ama_predictions <- predict(final_wf, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_1) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
ama_predictions
vroom_write(x=ama_predictions, file="./PenLogReg.csv", delim=",")
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
ama_train <- ama_train %>%
mutate(ACTION = as.factor(ACTION))
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
set_engine("glmnet")
amazon_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod)
## Grid of values to tune over
tuning_grid <- grid_regular(penalty(),
mixture(),
levels = 5) ## L^2 total tuning possibilities
## Split data for CV
folds <- vfold_cv(ama_train, v = 5, repeats=1)
## Run the CV
CV_results <- amazon_workflow %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics=metric_set(roc_auc)) #Or leave metrics NULL
## Find Best Tuning Parameters
bestTune <- CV_results %>%
select_best("roc_auc")
## Finalize the Workflow & fit it
final_wf <-
amazon_workflow %>%
finalize_workflow(bestTune) %>%
fit(data=ama_train)
## Predict
ama_predictions <- predict(final_wf, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_1) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./PenLogReg.csv", delim=",")
bestTune
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION))
ggplot(ama_train) +
geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
ggplot(ama_train) +
geom_boxplot(aes(x=ama_train$RESOURCE, y = ACTION))
ggplot(data=ama_train) +
geom_mosaic(aes(x=ama_train$ROLE_TITLE), fill=ama_train$ACTION)
library(ggmosaic)
ggplot(data=ama_train) +
geom_mosaic(aes(x=ama_train$ROLE_TITLE), fill=ama_train$ACTION)
bestTune
