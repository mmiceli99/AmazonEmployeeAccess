hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen')
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen4')
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen4')
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen')
summary(data[,2])
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen')
summary(data[,2])
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='blue')
var(data[,2])
var(data$B)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='blue', breaks = 7)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 7)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 8)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 9)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 10)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 100)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 7)
lines(v=mean(data$B))
abline(v=mean(data$B))
abline(v=mean(data$B), col="firebrick")
?abline
abline(v=mean(data$B), col="firebrick", lty=3)
abline(v=mean(data$B), col="firebrick", lty=10)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 7)
abline(v=mean(data$B), col="firebrick", lty=10)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 7)
abline(v=mean(data$B), col="firebrick", lty=3)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 7)
abline(v=mean(data$B), col="firebrick", lty=1)
abline(v=mean(data$B), col="firebrick", lty=1, lwd=5)
hist(data[,2], main="Yeehaw", xlab='Number', ylab = 'B', col='seagreen', border ='black', breaks = 7)
abline(v=mean(data$B), col="firebrick", lty=3, lwd=3)
boxplot(data)
boxplot(data, col='black')
boxplot(data, col='seagreen')
boxplot(data)
?vroom()
library(tidyverse)
?vroom()
?vroom()
library(vroom)
?vroom
data <- read.csv("C:/School/Stat348/KaggleBikeShare/test.csv")
View(data)
vData <- vroom("C:/School/Stat348/KaggleBikeShare/test.csv")
View(vData)
vData <- vData %>%
mutate(as.factor(season))
View(vData)
vData <- vroom("C:/School/Stat348/KaggleBikeShare/test.csv")
View(vData)
vData <- vroom("C:/School/Stat348/KaggleBikeShare/test.csv")
vData$season <- as.factor(vData$season)
vData$holiday <- as.factor(vData$holiday)
vData$workingday <- as.factor(vData$workingday)
vData$weather <- as.factor(vData$weather)
vData <- vroom("C:/School/Stat348/KaggleBikeShare/train.csv")
vData$season <- as.factor(vData$season)
vData$holiday <- as.factor(vData$holiday)
vData$workingday <- as.factor(vData$workingday)
vData$weather <- as.factor(vData$weather)
DataExplorer::plot_intro(vData)
install.packages("DataExplorer")
DataExplorer::plot_intro(vData)
plot_bar <- DataExplorer::plot_bar(vData)
plot_hist <- DataExplorer::plot_histogram(vData)
plot_missing <- DataExplorer::plot_missing(vData)
ggplot(vData) %>%
aes(x=vData$temp, y=vData$windspeed)
ggplot(vData) %>%
aes(x=temp, y=windspeed)
ggplot(vData) %>%
aes(x=temp, y=windspeed) + geom_point()
ggplot(vData, aes(x=temp, y=windspeed)) %>%
geom_point()
ggplot(vData, aes(x=temp, y=windspeed)) +
geom_point()
ggplot(vData, aes(x=temp, y=windspeed)) +
geom_point()
corr(vData)
cor(vData)
ggplot(vData, aes(x=humidity, y=windspeed)) +
geom_point()
ggplot(vData, aes(x=temp, y=atemp)) +
geom_point()
temp_atemp <- ggplot(vData, aes(x=temp, y=atemp)) +
geom_point()
GGally::ggpairs(vData)
install.packages("GGally")
GGally::ggpairs(vData)
plot_intro <- DataExplorer::plot_intro(vData)
plot_bar <- DataExplorer::plot_bar(vData)
plot_hist <- DataExplorer::plot_histogram(vData)
plot_missing <- DataExplorer::plot_missing(vData)
View(vData)
d
date_temp <- ggplot(vData, aes(x=vData$datetime, y=temp)) +
geom_point()
date_temp
date_temp <- ggplot(vData, aes(x=vData$datetime, y=temp)) +
geom_point() +
geom_smooth()
date_temp
date_temp <- ggplot(vData, aes(x=vData$datetime, y=temp)) +
geom_point() +
geom_smooth(se=false)
plot_hist
plot_bar
box_humid <- ggplot(vData, aes(x=humidity))+
geom_boxplot()
box_humid
box_humid <- ggplot(vData, aes(x=humidity, y=season))+
geom_boxplot()
box_humid
weather_bar <- ggplot(vData, aes(x=weather)) +
geom_bar()
weather_bar
library(patchwork)
temp_atemp + date_temp
(temp_atemp + date_temp) / (box_humid + weather_bar)
plot_intro + plot_bar
plot_intro + plot_bar
install.packages('ggchernoff')
install.packages('ggChernoff')
?ggChernoff
flights
read.csv("C:/School/Stat386/lab-4-pandas-flights-mmiceli99/planes.csv")
flights <- read.csv("C:/School/Stat386/lab-4-pandas-flights-mmiceli99/planes.csv")
library(tidyverse)
library(ggChernoff)
ggplot(flights) +
ggChernoff()
ggplot(flights) +
geom_chernoff()
view(flights)
?geom_chernoff
ggplot(flights) +
geom_chernoff(aes(x=tailnum, y =c(year, seats, speed, engines)))
ggplot(flights) +
geom_chernoff(aes(x=tailnum, y =c(year)))
read.csv("C:/School/Stat348/Amazon/train.csv")
ama_train <- vroom("C:/School/Stat348/Amazon/train.csv")
library(vroom)
library(tidyverse)
library(tidymodels)
ama_train <- vroom("C:/School/Stat348/Amazon/train.csv")
View(ama_train)
ama_train <- vroom("C:/School/Stat348/Amazon/train.csv")
library(vroom)
library(tidyverse)
library(tidymodels)
ama_train <- vroom("C:/School/Stat348/Amazon/train.csv")
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
View(ama_train)
ggplot(ama_train) +
geom_bar(mapping = action)
ggplot(ama_train) +
geom_bar(mapping = ACTION)
ggplot(ama_train) +
geom_bar(mapping = ama_test$id)
ggplot(ama_train) +
geom_bar(aes(mapping = ama_test$id))
geom_bar(aes(x=ama_train$ACTION)
ggplot(ama_train) +
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION))
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION, fill = ama_train$RESOURCE))
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION, col = ama_train$RESOURCE))
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION), col = ama_train$MGR_ID)
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION), fill = ama_train$RESOURCE)
ggplot(ama_train) +
geom_bar(aes(x=ama_train$ACTION))
ggplot(ama_train) +
geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
ggplot(ama_train) +
geom_boxplot(aes(x=ama_train$RESOURCE, y = ACTION))
library(ggbox)
my_recipe <- recipe(rFormula, data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(rFormula, data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
library(tidymodels)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
my_recipe <- recipe(rFormula, data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) #%>% # dummy variable encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) #%>% # dummy variable encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_mod <- linear_reg() %>%
set_engine("lm")
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) #%>% # dummy variable encoding
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
install.packages('embed')
library(embed)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_other(var2, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors, threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
#step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .05) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
#step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# also step_lencode_glm() and step_lencode_bayes()
# NOTE: some of these step functions are not appropriate to use together
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
model <- glm(target ~ ACTION, data = ama_train, family = "binomial")
# Fit logistic regression model
model <- glm(ACTION ~ ., data = ama_train, family = "binomial")
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow,
new_data=ama_test)
View(ama_predictions)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
bind_cols(., bikeTest) %>% #Bind predictions with test data
select(RESOURCE, .pred) #Just keep datetime and predictions
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
bind_cols(., ama_train) %>% #Bind predictions with test data
select(RESOURCE, .pred) #Just keep datetime and predictions
View(ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
bind_cols(., ama_test) %>% #Bind predictions with test data
select(RESOURCE, .pred) #Just keep datetime and predictions
ama_predictions <- predict(ama_workflow, new_data=ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate(row_number = row_number()) %>%
select(row_number, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
select(Id, .pred)
vroom_write(x=test_preds, file="./LogReg.csv", delim=",")
vroom_write(x=ama_preds, file="./LogReg.csv", delim=",")
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
wd()
source("C:/School/Stat348/AmazonEmployeeAccess/Amazon_eda.R")
getwd()
setwd("C:/School/Stat348/AmazonEmployeeAccess")
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(ACTION=.pred) %>%
select(Id, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, .pred)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
ama_train <- vroom("C:/School/Stat348/AmazonEmployeeAccess/train.csv")
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
View(ama_test)
View(ama_train)
View(ama_test)
View(ama_train)
View(ama_test)
View(ama_test)
View(ama_train)
View(ama_test)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_mod <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_mutate_at(ACTION = as.factor(ACTION)) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_mod <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
baked <- bake(prep, new_date = ama_test)
baked <- bake(prep, new_date = ama_test)
baked <- bake(prep, new_data = ama_train)
baked <- bake(prep, new_date = ama_test)
ama_test <- vroom("C:/School/Stat348/AmazonEmployeeAccess/test.csv")
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
baked <- bake(prep, new_date = ama_test)
ama_test
# ggplot(ama_train) +
#   geom_bar(aes(x=ama_train$ACTION))
#
# ggplot(ama_train) +
#   geom_box(aes(x=ama_train$RESOURCE, y = ACTION))
#
ama_train <- ama_train %>%
mutate(ACTION = as.factor(ACTION))
my_recipe <- recipe(ACTION ~ ., data=ama_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
#step_mutate_at(ACTION, fn = factor) %>%
step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
step_dummy(all_nominal_predictors()) %>% # dummy variable encoding
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = ama_train)
# Fit logistic regression model
my_mod <- logistic_reg() %>%
set_engine('glm')
ama_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(my_mod) %>%
fit(data=ama_train)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred) %>%
select(Id, Action)
ama_predictions <- predict(ama_workflow, new_data=ama_test
ama_predictions <- predict(ama_workflow, new_data=ama_test)
ama_predictions <- predict(ama_workflow, new_data=ama_test)
View(ama_predictions)
View(ama_predictions)
ama_predictions <- predict(ama_workflow, new_data=ama_test) %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_class) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_class) %>%
select(Id, Action)
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_prob) %>%
select(Id, Action)
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob')
ama_predictions <- predict(ama_workflow, new_data=ama_test, type='prob') %>%
mutate( Id = row_number()) %>%
rename(Action=.pred_1) %>%
select(Id, Action)
vroom_write(x=ama_predictions, file="./LogReg.csv", delim=",")
